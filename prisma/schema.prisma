// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_PRISMA_URL")
  directUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String?
  password String
  role     String  @default("user")

  events Event[] @relation("EventAccounts")

  caretakerOf CaretakerRelation[] @relation("CaretakerRelationCaretaker")
  caretakers  CaretakerRelation[] @relation("CaretakerRelationPatient")

  medications Medication[]
  medicationTimingPreferences MedicationTimingPreference[]

  createdAt DateTime @default(now())
}

model CaretakerRelation {
  id          String  @id @default(uuid())
  isConfirmed Boolean @default(false)

  patient   Account @relation("CaretakerRelationPatient", fields: [patientId], references: [id])
  patientId String

  caretaker   Account @relation("CaretakerRelationCaretaker", fields: [caretakerId], references: [id])
  caretakerId String

  events Event[] 

  createdAt DateTime @default(now())

  @@unique([patientId, caretakerId], name: "unique_patient_caretaker")
}

model Medication {
  id          String  @id @default(uuid())
  name        String
  description String?
  dosage      String
  frequency   String

  startDate DateTime
  endDate   DateTime

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  scheduledMedications ScheduledMedication[]

  createdAt DateTime @default(now())
}

model ScheduledMedication {
  id          String   @id @default(uuid())
  scheduledAt DateTime

  taken       Boolean  @default(false)
  takenAt     DateTime?

  medication   Medication @relation(fields: [medicationId], references: [id])
  medicationId String

  createdAt DateTime @default(now())
}

model MedicationTimingPreference {
  id        String @id @default(uuid())
  quarter   String
  
  preferredTime String
  
  totalTaken     Int @default(0)
  averageDelay   Int @default(0)
  lastAdjusted   DateTime @default(now())
  
  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([accountId, quarter])
}

model Event {
  id      String @id @default(uuid())
  type    String
  message String

  key       String @unique
  timestamp DateTime @default(now())

  resolved Boolean @default(false)

  accounts Account[] @relation("EventAccounts")

  // Optional fields for context
  caretakerRelation CaretakerRelation? @relation(fields: [caretakerRelationId], references: [id])
  caretakerRelationId String?
}
